<?php
/**
 * Implements hook_menu().
 */
function catalog_form_menu() {
    $items = array();
    $items['back_response/%code'] = array(
//        'title'   => 'Back response',
        'page callback'    => 'back_response',
        'page arguments'   => array(1),
        'access arguments' => array('access content'),
        'file'             => 'back_response.frontend.inc',
    );
    return $items;
}

function code_load($code) {
    $result = db_select('back_response', 'br')
        ->fields('br')
        ->condition('br.code', $code)
        ->execute()
        ->fetchObject();

    return $result ? $result : FALSE;

}

/**
 * Implements hook_form().
 */
function catalog_form_form($form, &$form_state){
    $form=array();
    $form['category'] = array(
        '#type'	=> 'textfield',
        '#title' => t('Category'),
        '#default_value' => t('CATEGORY'),
        '#required' => TRUE,
        '#disabled' => TRUE,
        '#attributes' => array('id' => array('cat')),
    );
    $form['tid'] = array(
        '#type' => 'hidden',
        '#default_value' => '',
        '#attributes' => array('id' => array('hidden')),
    );
    $form['name'] = array(
        '#type'	=> 'textfield',
        '#title' => t('Name'),
        '#default_value' => t('Name surname first name'),
        '#required' => TRUE,
    );
    $form['m_phone'] = array(
        '#type'	=> 'textfield',
        '#title' => t('Mobile phone'),
        '#default_value' => t('MOBILE PHONE'),
        '#attributes' => array('id' => array('phone')),
    );
    $form['h_phone'] = array(
        '#type'	=> 'textfield',
        '#title' => t('Home phone'),
        '#default_value' => t('HOME PHONE'),
        '#attributes' => array('id' => array('h_phone')),
    );
    $form['email'] = array(
        '#type'	=> 'textfield',
        '#title' => t('E-mail'),
        '#default_value' => t('E-MAIL'),
    );

    $form['question'] = array(
        '#type' => 'textarea',
        '#title' => t('Question'),
        '#default_value' => t('ASK YOUR QUESTION'),
        '#required' => TRUE,
        '#resizable' => FALSE
    );
    $form['file'] = array(
        '#type' => 'file',
        '#size' => 53,
    );
    $form['time'] = array(
        '#type' => 'textfield',
        '#title' => t('Response time'),
    );
    $form['hour'] = array(
        '#markup' => t('<div class="hour">Часов</div>'),
    );
    $form['consent_msg'] = array(
        '#type' => 'checkbox',
        '#title' => t('I agree to send a message to organizations'),
        '#default_value' => TRUE,
        '#required' => TRUE,
    );
    $form['consent_email'] = array(
        '#type' => 'checkbox',
        '#title' => t('I agree to receive responses from organizations in the email'),
        '#default_value' => TRUE,
        '#required' => TRUE,
    );
    $form['consent_phone'] = array(
        '#type' => 'checkbox',
        '#title' => t('I agree to receive responses from the organizations on the phone'),
        '#default_value' => TRUE,
        '#required' => TRUE,
    );
    $form['captcha'] = array(
        '#type' => 'captcha',
        '#captcha_type' => 'image_captcha/Image',
        '#attributes' => array('id' => array('captcha')),
    );
    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Send'),
        '#submit' => array('catalog_form_form_submit'),
    );
    return $form;
}
/**
 * Implements hook_form().
 */
function guest_reply_form($form, &$form_state){
    $form=array();
    $form['message'] = array(
        '#type' => 'textarea',
        '#title' => t('Message'),
        '#default_value' => t('Your message'),
        '#required' => TRUE,
        '#resizable' => FALSE
    );
    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Send Message'),
        '#submit' => array('guest_reply_form_submit'),

    );
    return $form;
}
/**
 * Implements hook_block_info().
 */
function catalog_form_block_info() {
    $blocks['catalog_form'] = array(
        'info' => t('Catalog form'),
    );
    $blocks['guest_reply'] = array(
        'info' => t('Guest reply'),
    );
    $blocks['message_counter'] = array(
        'info' => t('Message counter'),
    );
    $blocks['user_links'] = array(
        'info' => t('User links'),
    );
    $blocks['unread_messages'] = array(
        'info' => t('Count unread messages'),
    );
    $blocks['profile_link'] = array(
        'info' => t('User profile link'),
    );

    return $blocks;
}
/**
 * Implements hook_block_view().
 */
function catalog_form_block_view($delta = '') {
    $block = array();
    switch($delta){
        case 'catalog_form':
            $block['subject'] = t('Catalog form');
            $block['content'] = drupal_get_form('catalog_form_form');
            break;
        case 'guest_reply':
            if(get_author() == '0'){
                $block['subject'] = t('Guest reply');
                $block['content'] = drupal_get_form('guest_reply_form');
            }
            break;
        case 'message_counter':
            $block['subject'] = t('Message counter');
            $block['content'] = message_count();
            break;
        case 'user_links':
            $block['subject'] = t('Links');
            $block['content'] = user_links();
            break;
        case 'unread_messages':
            $block['subject'] = t('Count unread messages');
            $block['content'] = count_unread_messages();
            break;
        case 'profile_link':
            $block['subject'] = t('User profile link');
            $block['content'] = theme('profile_link');
            break;
    }
    return $block;
}
function user_links(){
    global $user;
    if(current_path() == "user/$user->uid/edit"){
        $username = '';
        $userpath = '/messages';
        $usertext = t('Personal cabinet');
    }else{
        $username = $user->name;
        $userpath = "/user/$user->uid/edit";
        $usertext = t('Personal data');
    }

    return theme('user_links', array('name' => $username, 'userpath' => $userpath, 'usertext' => $usertext));
}
/**
 * Implements hook_form_validate().
 */
function catalog_form_form_validate($form, &$form_state){
    if (!is_valid_email($form_state['values']['email'])){
        form_set_error('email', t('This email is not valid'));
    }
    $max_size = 5*1024*1024;
    if($_FILES['files']['size'] != 0){
        if(($_FILES['files']['size']['file']) > $max_size){
            form_set_error('file', t('The file size must be less than').' 5mb');
        }
    }
    $validators = array(
        'file_validate_extensions' => array('png gif jpg jpeg doc docx xls xlsx rtf txt pdf'),
    );
    if ($file = file_save_upload('file', $validators, 'public://upload_files/')) {
        $form_state['values']['file'] = $file;
    }
    if( $form_state['values']['question'] == $form['question']['#default_value']){
        form_set_error('question', t('The field question is required'));
    }
    if( $form_state['values']['m_phone'] == $form['m_phone']['#default_value']){
        form_set_error('m_phone', t('The field mobile phone is required'));
    }
    if( $form_state['values']['name'] == $form['name']['#default_value']){
        form_set_error('name', t('The field name is required'));
    }
    if( $form_state['values']['tid'] == ''){
        form_set_error('category', t('You do not choose a category'));
    }
}

function is_valid_email($email){
    return preg_match("/^([a-z0-9_\.-]+)@([a-z0-9_\.-]+)\.([a-z\.]{2,6})$/", $email);
}

function get_users($tid){
    $query = db_select('field_data_field_category', 'c')
        ->fields('c', array('entity_id'))
        ->condition('c.field_category_tid', $tid, '=')
        ->execute();
    while ($user = $query->fetchassoc()){
        $users[] = $user['entity_id'];
    }
    if (isset($users)){
        return $users;
    }else{
        return;
    }

}

function get_author(){
    if((arg(0) == 'messages') and (arg(1) == 'view') and (arg(2))){
        $mid = (int)arg(2);
        $query = db_select('pm_message', 'm')
            ->fields('m', array('author'))
            ->condition('mid', $mid)
            ->execute()
            ->fetchAssoc();
        return $query['author'];
    }

}
function get_message($mid){
    $query = db_select('guest_reply', 'g')
        ->fields('g')
        ->condition('mid', $mid, '=')
        ->execute()
        ->fetchassoc();
    return $query;
}

function catalog_form_form_submit($form, &$form_state) {
    global $user;
    $users = get_users($_POST['tid']);
    if (!$users){
        drupal_set_message(t('Users not found in this category'));

    } else{
        if($form_state['values']['file'] != ''){
            $file = $form_state['values']['file'];
            $file->status = FILE_STATUS_PERMANENT;
            file_save($file);
        }
        $ser_users = serialize($users);
        $time = $form_state['values']['time'] ? time() + 3600 * $form_state['values']['time'] : '';
        $result = db_insert('catalog_msg')
            ->fields(array(
            'category' => $form_state['values']['category'],
            'tid' => $form_state['values']['tid'],
            'name' => $form_state['values']['name'],
            'm_phone' => $form_state['values']['m_phone'],
            'h_phone' => $form_state['values']['h_phone'] != $form['h_phone']['#default_value'] ? $form_state['values']['h_phone'] : '',
            'email' => $form_state['values']['email'],
            'question' => $form_state['values']['question'],
            'file' => $form_state['values']['file'] ? serialize($form_state['values']['file']) : '',
            'time' => $time,
            'users' => $ser_users,
            'author_id' => $user->uid
        ))
            ->execute();
        if($result){
            drupal_set_message(t('Your question has been sent successfully'));
        }
    }
}
function insert_back_response($code, $uid, $email, $m_phone, $h_phone, $mid, $recipient_id){
    db_insert('back_response')
        ->fields(array(
        'code' => $code,
        'uid' => $uid,
        'email_to' => $email,
        'm_phone' => $m_phone,
        'h_phone' => $h_phone,
        'mid' => $mid,
        'recipient_id' => $recipient_id
    ))
        ->execute();
}
function guest_reply_form_submit($form, &$form_state){
    global $user;
    $user_params = user_load($user->uid);
    $mid = (int)arg(2);
    $message = get_message($mid);
    $code = md5(microtime());
    $params['confidence'] = confidence($user_params);
    $params['values'] = $form_state['values'];
    if(!get_br_status($mid)){
        $params['link'] = url( "back_response/$code", array('absolute' => true, 'alias' => false ));
    }else{
        $params['link'] = '';
    }
    $mail = drupal_mail('catalog_form', 'key', trim($message['email']), language_default(), $params);
    if ($mail['result']){
        drupal_set_message(t('Your message has been sent successfully'));
        insert_back_response($code, $user->uid, trim($message['email']), $message['m_phone'], $message['h_phone'], $mid, '0');
        update_br_status('1', $mid);
    }
    else {
        drupal_set_message(t('Message was not sent'), 'error');
    }
}

function catalog_form_mail($key, &$message, $params) {
    if ($key == 'key') {
        global $base_url;
        $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed';
        $message['subject'] = t('The answer from site:').' '.$base_url;
        $message['body'][] = "<p>".mat_moderation($params['values']['message'])."</p>"
            ."<p>".$params['confidence']."</p>";
        if($params['link'])
            $message['body'][] .="<p>".t('To give a user access to your personal information, click here:')."</p>"
                .$params['link'];

    }
}

function confidence($user){
    $message = t('Confidence for company')." \"".$user->field_naimenovanie['und']['0']['value']."\"";
    if(empty($user->field_name) or empty($user->field_inn) or empty($user->field_ogrn) or empty($user->field_okpo)
        or empty($user->field_okpd) or empty($user->field_uridicheskiy) or empty($user->field_fakticheskiy)
        or empty($user->field_adress) or empty($user->field_phone)){
        $message .= "<span style='color: red; font-size: 28px'> *</span>";
    }else{
        $message .= "<span style='color: red; font-size: 28px'> *******</span>";
    }
    return $message;
}

/**
 * Implements hook_user_login
 */
function catalog_form_user_login(&$edit, $account) {
    $edit['redirect'] = 'messages';
}

function message_count(){
    global $user;
    $username = $user->name;
    $m_count = get_count_messages($user->uid, false);
    $client = get_client($user->uid);
    return theme('count_message', array('name' => $username, 'all' => $m_count, 'client' => $client));
}
function get_count_messages($uid, $is_new){
    $query = db_select('pm_index ', 'p')
        ->fields('p', array('thread_id'))
        ->distinct()
        ->condition('recipient', $uid, '=')
        ->condition('deleted', '0', '=');
    if($is_new)
        $query->condition('is_new ', '1', '=');
    $result = $query->execute();
    $count = $result->rowCount();
    return $count;
}
function count_unread_messages(){
    global $user;
    $count = get_count_messages($user->uid, true);
    $class = !$count ? 'hidden' : '';
    $path = base_path() . drupal_get_path('module', 'catalog_form');
    return theme('unread_messages', array('count' => $count, 'class' => $class, 'path' => $path));
}
function get_client($uid){
    $query = db_select('back_response ', 'br')
        ->fields('br')
        ->condition('uid', $uid, '=')
        ->condition('status', '1', '=');
    $result = $query->execute();
    $count = $result->rowCount();
    return $count;
}
/**
 * Implements hook_theme
 */
function catalog_form_theme() {
    $module_path = drupal_get_path('module', 'catalog_form');
    return array(
        'count_message' => array(
            'template' => 'count_message',
            'path' => $module_path,
        ),
        'unread_messages' => array(
            'template' => 'unread_messages',
            'path' => $module_path,
        ),
        'profile_link' => array(
            'template' => 'profile_link',
            'path' => $module_path,
        ),
        'user_links' => array(
            'template' => 'user_links',
            'path' => $module_path,
        ),
        'back_response' => array(
            'template' => 'back_response',
            'path' => $module_path,
            'variables' => array(
                'name' => NULL,
            ),
        )
    );
}
