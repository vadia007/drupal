<?php
function msg_moderation_menu() {
    $items = array();
    $items['admin/structure/msg_moderation'] = array(
        'title' => t('Message moderation'),
        'description' => t('List of messages for moderation'),
        'page callback' => 'drupal_get_form',
        'page arguments' => array('msg_moderation_form'),
        'access arguments' => array('message moderate'),
    );
    $items['admin/msg_moderation'] = array(
        'title callback' => 'count_mod_messages',
        'description' => t('List of messages for moderation'),
        'page callback' => 'drupal_get_form',
        'page arguments' => array('msg_moderation_form'),
        'access arguments' => array('message moderate'),
        'weight' => 15,
    );
    $items['ajax/unread_messages'] = array(
        'type' => MENU_CALLBACK,
        'page callback' => 'get_unread_messages',
        'page arguments' => array(2),
        'access callback' => TRUE,
        'access arguments' => array('access content')
    );
    return $items;
}

function get_unread_messages($uid){
    $query = db_select('pm_index ', 'p')
        ->fields('p', array('thread_id'))
        ->distinct()
        ->condition('recipient', $uid, '=')
        ->condition('deleted', '0', '=');
    $query->condition('is_new ', '1', '=');
    $result = $query->execute();
    $count = $result->rowCount();
    drupal_json_output($count);
}
function msg_moderation_permission() {
    return array(
        'message moderate' => array(
            'title' => t('Moderate messages'),
            'description' => t('Moderate messages'),
        ),
    );
}
function count_mod_messages(){
    $time = time();
    $or = db_or()->condition('time', '', '=')->condition('time', $time, '>');
    $query = db_select('catalog_msg', 'cm');
    $query->innerJoin('users', 'u', 'u.uid = cm.author_id');
    $query->fields('cm');
    $query->addField('u', 'name', 'author_name');
    $query->condition('cm.status', '0', '=');
    $query->condition($or);
    $result = $query->execute();
    $count = $result->rowCount();
    return t('Untested')."($count)";
}

function msg_moderation_form($form_state) {

    $header = array
    (
        'author' => t('Author'),
        'message' => t('Message'),
    );
    $list = get_moderated_messages();
    if(!$list){
        $form['table'] = array
        (
            '#type' => 'tableselect',
            '#header' => $header,
            '#empty' => t('All messages was moderated'),
        );
        return $form;
    }
    $options = array();
    foreach($list as $message)
    {
        $category = get_category_name($message['tid']);
        $message['body'] = "<div>".t('Category').": ".$category."</div>"
            ."<div>".t('Sender').": ".$message['name']."</div>"
            ."<div>".t('Mobile phone').": ".$message['m_phone']."</div>";
        $message['body'] .= $message['h_phone'] ? "<div>".t('Home phone').": ".$message['h_phone']."</div>" : '';
        $message['body'] .= "<div>".t('E-mail').": ".$message['email']."</div>"
            ."<div>".t("Question").": ".$message['question']."</div>";
        if($message['file'] != ''){
            $file = unserialize($message['file']);
            $file_url = file_create_url($file->uri);
            $message['body'] .= t("File").": ".l($file->filename, $file_url, array( 'attributes' => array('target' => '_blank')));
        }
        $options[$message['id']] = array
        (
            'author' => ($message['author_name'] != '') ? $message['author_name'] : t('Guest'),
            'message' => mat_moderation($message['body']),
        );
    }

    $form['table'] = array
    (
        '#type' => 'tableselect',
        '#header' => $header,
        '#options' => $options,
        '#empty' => t('Messages not found'),
    );
    $form['pager'] = array('#markup' => theme('pager'));

    $form['action'] = array(
        '#type' => 'select',
        '#title' => t('The action with the selected fields'),
        '#options' => array(
            0 => t('Confirm'),
            1 => t('Reject'),
        ),
        '#default_value' => 0,
    );
    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Save'),
    );

    return $form;

}

function get_category_name($tid){
    $query = db_select('taxonomy_term_data', 't')
        ->fields('t', array('name'))
        ->condition('tid', $tid, '=')
        ->execute()
        ->fetchCol();
    return $query['0'];
}
function msg_moderation_form_submit($form, &$form_state) {
    foreach($form['table'] as $messages){
        if(isset($messages['#checked']) and $messages['#checked'] == true){
            $selected[] = $messages['#return_value'];
        }
    }
    if(isset($selected)){
        if($form['action']['#value'] == 0){
            $conf_messages = get_confirm_msg($selected);
            foreach($conf_messages as $message){
                $users = unserialize($message['users']);
                $message['body'] = "</div>".t('Sender').": ".$message['name']."</div>"
                    ."\n"."<div>".t("Question").": ".$message['question']."</div>";
                if($message['file'] != ''){
                    $file = unserialize($message['file']);
                    $file_url = file_create_url($file->uri);
                    $message['body'] .="\n".t("File").": ".l($file->filename, $file_url, array( 'attributes' => array('target' => '_blank')));
                }
                $theme = mb_substr(trim($message['question']), 0, 8)."..";
                $author = user_load($message['author_id']);
                foreach($users as $uid){
                    $new_message = privatemsg_new_thread(array(user_load($uid)), $theme, $message['body'],
                        array('author' => $author, 'new' => true));
                    $array_mid[] = array(
                        'mid' => $new_message['message']->mid,
                        'email' => $message['email'],
                        'm_phone' => $message['m_phone'],
                        'h_phone' => $message['h_phone'],
                        'author_id' => $message['author_id'],
                        'recipient_id' => $uid,
                        'time' => $message['time']);
                }
                guest_reply_insert($array_mid);
            }
            update($selected, '1');
        }else{
            update($selected, '2');
        }
    }
}
function guest_reply_insert($array_mid){
    $query = db_insert('guest_reply')->fields(array('mid', 'email', 'm_phone', 'h_phone', 'author_id', 'recipient_id', 'time'));
    foreach ($array_mid as $array) {
        $query->values($array);
    }
    $query->execute();
}
function get_confirm_msg($selected){
    $query = db_select('catalog_msg', 'cm')
        ->fields('cm')
        ->condition('id', $selected, 'IN')
        ->execute();
    while ($message = $query->fetchassoc()){
        $messages[] = $message;
    }
    return $messages;
}

function update($update, $status){
    db_update('catalog_msg')
        ->fields(array('status' => $status,))
        ->condition ('id', $update, 'IN')
        ->execute();
}

function mat_moderation($input){
    $pattern = "/\w{0,5}[хx]([хx\s\!@#\$%\^&*+-\|\/]{0,6})[уy]([уy\s\!@#\$%\^&*+-\|\/]{0,6})[ёiлeеюийя]\w{0,7}|\w{0,6}[пp]([пp\s\!@#\$%\^&*+-\|\/]{0,6})[iие]([iие\s\!@#\$%\^&*+-\|\/]{0,6})[3зс]([3зс\s\!@#\$%\^&*+-\|\/]{0,6})[дd]\w{0,10}|[сcs][уy]([уy\!@#\$%\^&*+-\|\/]{0,6})[4чkк]\w{1,3}|\w{0,4}[bб]([bб\s\!@#\$%\^&*+-\|\/]{0,6})[lл]([lл\s\!@#\$%\^&*+-\|\/]{0,6})[yя]\w{0,10}|\w{0,8}[её][bб][лске@eыиаa][наи@йвл]\w{0,8}|\w{0,4}[еe]([еe\s\!@#\$%\^&*+-\|\/]{0,6})[бb]([бb\s\!@#\$%\^&*+-\|\/]{0,6})[uу]([uу\s\!@#\$%\^&*+-\|\/]{0,6})[н4ч]\w{0,4}|\w{0,4}[еeё]([еeё\s\!@#\$%\^&*+-\|\/]{0,6})[бb]([бb\s\!@#\$%\^&*+-\|\/]{0,6})[нn]([нn\s\!@#\$%\^&*+-\|\/]{0,6})[уy]\w{0,4}|\w{0,4}[еe]([еe\s\!@#\$%\^&*+-\|\/]{0,6})[бb]([бb\s\!@#\$%\^&*+-\|\/]{0,6})[оoаa@]([оoаa@\s\!@#\$%\^&*+-\|\/]{0,6})[тnнt]\w{0,4}|\w{0,10}[ё]([ё\!@#\$%\^&*+-\|\/]{0,6})[б]\w{0,6}|\w{0,4}[pп]([pп\s\!@#\$%\^&*+-\|\/]{0,6})[иeеi]([иeеi\s\!@#\$%\^&*+-\|\/]{0,6})[дd]([дd\s\!@#\$%\^&*+-\|\/]{0,6})[oоаa@еeиi]([oоаa@еeиi\s\!@#\$%\^&*+-\|\/]{0,6})[рr]\w{0,12}/u";
    return preg_replace($pattern, t('[censor]'), $input);
}

function msg_moderation_privatemsg_message_presave_alter(&$message) {
    if(!isset($message->new)){
        $message->subject = mat_moderation($message->subject);
        $message->body = mat_moderation($message->body);
        if(!get_br_status($message->thread_id)){
            global $user;
            if($user->uid != '0'){
                $mess = get_message($message->thread_id);
                if($mess['author_id'] != $user->uid){
                    $user_params = user_load($user->uid);
                    $code = md5(microtime());
                    $confidence = confidence($user_params);
                    $link = url( "back_response/$code", array('absolute' => true, 'alias' => false ));
                    $message->body .= "\n"."\n"."<p>".$confidence."</p>"
                        ."\n"."<p>".t('To give a user access to your personal information, click here:')."</p>"
                        ."\n".$link;
                    insert_back_response($code, $user->uid, $mess['email'], $mess['m_phone'], $mess['h_phone'], $mess['mid'], $mess['author_id']);
                    update_br_status('1', $message->thread_id);
                }
            }
        }
    }
}
function get_br_status($mid){
    $query = db_select('guest_reply', 'g')
        ->fields('g', array('br_send'))
        ->condition('mid', $mid, '=')
        ->execute()
        ->fetchCol();
    return $query['0'];
}

function update_br_status($status, $mid){
    db_update('guest_reply')
        ->fields(array('br_send' => $status,))
        ->condition ('mid', $mid, '=')
        ->execute();
}
function get_moderated_messages(){
    $time = time();
    $or = db_or()->condition('time', '', '=')->condition('time', $time, '>');
    $query = db_select('catalog_msg', 'cm')
        ->extend('PagerDefault');
    $query->innerJoin('users', 'u', 'u.uid = cm.author_id');
    $query->fields('cm');
    $query->addField('u', 'name', 'author_name');
    $query->condition('cm.status', '0', '=');
    $query->condition($or);
    $result = $query->limit(20)
        ->execute();
    while ($message = $result->fetchassoc()){
        $messages[] = $message;
    }
    return isset($messages) ? $messages : '';

}
function msg_moderation_preprocess_page(&$variables){
    global $user;
    if($user->uid){
        $module_path = drupal_get_path('module', 'msg_moderation');
        drupal_add_js($module_path . '/js/unread_msg.js', 'file');
        drupal_add_js(array('uid' => $user->uid), 'setting');
    }
    if(arg(0) =='messages' and arg(1) == 'view' and preg_match('/\d{1,10}/', arg(2))){
        $waiting_time = get_waiting_time(arg(2));
        drupal_add_js(array('waiting_time' => $waiting_time), 'setting');
    }
}
function get_waiting_time($mid){
    $query = db_select('guest_reply', 'g')
        ->fields('g', array('time'))
        ->condition('mid', $mid)
        ->execute()
        ->fetchAssoc();
    return $query['time'];
}